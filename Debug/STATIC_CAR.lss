
STATIC_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c90  00000d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000d24  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001f0  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200a  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c04  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000097e  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f4  00000000  00000000  00004c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b8  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001937  00000000  00000000  000055e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  00006f17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <main>
  74:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Car_SM_Init>:

 ERROR_STATUS Car_SM_Init(void)
 {
	 ERROR_STATUS ERROR = E_OK;
	 
	 ERROR = Us_Init();									//initialize the ultrasonic
  7c:	0e 94 8c 05 	call	0xb18	; 0xb18 <Us_Init>
	 ERROR = Steering_Init();							//initialize the steering
  80:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Steering_Init>
	 ERROR = Steering_SteerCar(CAR_FORWARD,30);			//make the car move forward with speed 30% (30% duty cycle)
  84:	6e e1       	ldi	r22, 0x1E	; 30
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 01 04 	call	0x802	; 0x802 <Steering_SteerCar>

	 return ERROR;
 }
  8c:	08 95       	ret

0000008e <Car_SM_Update>:


 ERROR_STATUS Car_SM_Update(void)
 {
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	00 d0       	rcall	.+0      	; 0x94 <Car_SM_Update+0x6>
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	 ERROR_STATUS ERROR = E_OK;
	 
	 uint16_t Distance = 0;
  98:	1a 82       	std	Y+2, r1	; 0x02
  9a:	19 82       	std	Y+1, r1	; 0x01
	 uint8_t State = 0;
	
	/*fire the ultrasonic trigger to start it*/
	 Us_Trigger();
  9c:	0e 94 ab 05 	call	0xb56	; 0xb56 <Us_Trigger>
	
	/*read the distance*/
	 Us_GetDistance(&Distance);
  a0:	ce 01       	movw	r24, r28
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Us_GetDistance>
	 DIO_Write(GPIOB,UPPER_NIBBLE,(Distance<<4));
  a8:	49 81       	ldd	r20, Y+1	; 0x01
  aa:	42 95       	swap	r20
  ac:	40 7f       	andi	r20, 0xF0	; 240
  ae:	60 ef       	ldi	r22, 0xF0	; 240
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f e7       	ldi	r18, 0x7F	; 127
  b8:	38 e3       	ldi	r19, 0x38	; 56
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <Car_SM_Update+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <Car_SM_Update+0x38>
  c6:	00 00       	nop
	if(Distance<30)
	{
		Steering_SteerCar(CAR_STOP,30);
	}*/
	/*decide and set the state according to the read distance*/
	 if ((Distance>=25) && (Distance<=30))
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	9c 01       	movw	r18, r24
  ce:	29 51       	subi	r18, 0x19	; 25
  d0:	31 09       	sbc	r19, r1
  d2:	26 30       	cpi	r18, 0x06	; 6
  d4:	31 05       	cpc	r19, r1
  d6:	38 f0       	brcs	.+14     	; 0xe6 <Car_SM_Update+0x58>
		{
			State = TURN_RIGHT;
		}
	 else 
	 if (Distance >30)
  d8:	8f 31       	cpi	r24, 0x1F	; 31
  da:	91 05       	cpc	r25, r1
  dc:	90 f4       	brcc	.+36     	; 0x102 <Car_SM_Update+0x74>
		{
			State = GO_FORWARD;
		}
	 else 
	 if (Distance < 25)
  de:	49 97       	sbiw	r24, 0x19	; 25
  e0:	a8 f0       	brcs	.+42     	; 0x10c <Car_SM_Update+0x7e>
		 break;
		 case GO_BACK:
		 ERROR = Steering_SteerCar(CAR_BACKWARD,30);
		 break;
		 default:
		 ERROR = E_NOK;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	17 c0       	rjmp	.+46     	; 0x114 <Car_SM_Update+0x86>
	 
	 /*switch between the states to control the car to avoid obstacles*/
	 switch (State)
	 {
	    case TURN_RIGHT:
		 ERROR = Steering_SteerCar(CAR_RIGHT,50);
  e6:	62 e3       	ldi	r22, 0x32	; 50
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	0e 94 01 04 	call	0x802	; 0x802 <Steering_SteerCar>
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	25 ea       	ldi	r18, 0xA5	; 165
  f2:	3e e0       	ldi	r19, 0x0E	; 14
  f4:	91 50       	subi	r25, 0x01	; 1
  f6:	20 40       	sbci	r18, 0x00	; 0
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <Car_SM_Update+0x66>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <Car_SM_Update+0x70>
  fe:	00 00       	nop
 100:	09 c0       	rjmp	.+18     	; 0x114 <Car_SM_Update+0x86>
		 _delay_ms(300);
		 break;
		 case GO_FORWARD:
		 ERROR = Steering_SteerCar(CAR_FORWARD,30);
 102:	6e e1       	ldi	r22, 0x1E	; 30
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 01 04 	call	0x802	; 0x802 <Steering_SteerCar>
		 break;
 10a:	04 c0       	rjmp	.+8      	; 0x114 <Car_SM_Update+0x86>
		 case GO_BACK:
		 ERROR = Steering_SteerCar(CAR_BACKWARD,30);
 10c:	6e e1       	ldi	r22, 0x1E	; 30
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 01 04 	call	0x802	; 0x802 <Steering_SteerCar>
		 ERROR = E_NOK;
		 break;
	 }

	 return ERROR;
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <DIO_init>:


#include "DIO.h"

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
 11e:	fc 01       	movw	r30, r24
	ERROR_STATUS ERROR = E_OK;
	
	switch (DIO_info->dir)
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	88 23       	and	r24, r24
 124:	19 f0       	breq	.+6      	; 0x12c <DIO_init+0xe>
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	f1 f5       	brne	.+124    	; 0x1a6 <DIO_init+0x88>
 12a:	21 c0       	rjmp	.+66     	; 0x16e <DIO_init+0x50>
	{
		case INPUT:
		switch (DIO_info->GPIO)
 12c:	80 81       	ld	r24, Z
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	61 f0       	breq	.+24     	; 0x14a <DIO_init+0x2c>
 132:	28 f0       	brcs	.+10     	; 0x13e <DIO_init+0x20>
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	79 f0       	breq	.+30     	; 0x156 <DIO_init+0x38>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	a9 f5       	brne	.+106    	; 0x1a6 <DIO_init+0x88>
 13c:	12 c0       	rjmp	.+36     	; 0x162 <DIO_init+0x44>
		{
			case GPIOA:
			PORTA_DIR &= ~(DIO_info->pins);
 13e:	9a b3       	in	r25, 0x1a	; 26
 140:	81 81       	ldd	r24, Z+1	; 0x01
 142:	80 95       	com	r24
 144:	89 23       	and	r24, r25
 146:	8a bb       	out	0x1a, r24	; 26
			break;
 148:	2e c0       	rjmp	.+92     	; 0x1a6 <DIO_init+0x88>
			case GPIOB:
			PORTB_DIR &= ~(DIO_info->pins);
 14a:	97 b3       	in	r25, 0x17	; 23
 14c:	81 81       	ldd	r24, Z+1	; 0x01
 14e:	80 95       	com	r24
 150:	89 23       	and	r24, r25
 152:	87 bb       	out	0x17, r24	; 23
			break;
 154:	28 c0       	rjmp	.+80     	; 0x1a6 <DIO_init+0x88>
			case GPIOC:
			PORTC_DIR &= ~(DIO_info->pins);
 156:	94 b3       	in	r25, 0x14	; 20
 158:	81 81       	ldd	r24, Z+1	; 0x01
 15a:	80 95       	com	r24
 15c:	89 23       	and	r24, r25
 15e:	84 bb       	out	0x14, r24	; 20
			break;
 160:	22 c0       	rjmp	.+68     	; 0x1a6 <DIO_init+0x88>
			case GPIOD:
			PORTD_DIR &= ~(DIO_info->pins);
 162:	91 b3       	in	r25, 0x11	; 17
 164:	81 81       	ldd	r24, Z+1	; 0x01
 166:	80 95       	com	r24
 168:	89 23       	and	r24, r25
 16a:	81 bb       	out	0x11, r24	; 17
			break;
 16c:	1c c0       	rjmp	.+56     	; 0x1a6 <DIO_init+0x88>
		}
		break;
		case OUTPUT:
		switch (DIO_info->GPIO)
 16e:	80 81       	ld	r24, Z
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	59 f0       	breq	.+22     	; 0x18a <DIO_init+0x6c>
 174:	28 f0       	brcs	.+10     	; 0x180 <DIO_init+0x62>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	69 f0       	breq	.+26     	; 0x194 <DIO_init+0x76>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	a1 f4       	brne	.+40     	; 0x1a6 <DIO_init+0x88>
 17e:	0f c0       	rjmp	.+30     	; 0x19e <DIO_init+0x80>
		{
			case GPIOA:
			PORTA_DIR |= (DIO_info->pins);
 180:	9a b3       	in	r25, 0x1a	; 26
 182:	81 81       	ldd	r24, Z+1	; 0x01
 184:	89 2b       	or	r24, r25
 186:	8a bb       	out	0x1a, r24	; 26
			break;
 188:	0e c0       	rjmp	.+28     	; 0x1a6 <DIO_init+0x88>
			case GPIOB:
			PORTB_DIR |= (DIO_info->pins);
 18a:	97 b3       	in	r25, 0x17	; 23
 18c:	81 81       	ldd	r24, Z+1	; 0x01
 18e:	89 2b       	or	r24, r25
 190:	87 bb       	out	0x17, r24	; 23
			break;
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <DIO_init+0x88>
			case GPIOC:
			PORTC_DIR |= (DIO_info->pins);
 194:	94 b3       	in	r25, 0x14	; 20
 196:	81 81       	ldd	r24, Z+1	; 0x01
 198:	89 2b       	or	r24, r25
 19a:	84 bb       	out	0x14, r24	; 20
			break;
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <DIO_init+0x88>
			case GPIOD:
			PORTD_DIR |= (DIO_info->pins);
 19e:	91 b3       	in	r25, 0x11	; 17
 1a0:	81 81       	ldd	r24, Z+1	; 0x01
 1a2:	89 2b       	or	r24, r25
 1a4:	81 bb       	out	0x11, r24	; 17
		}
		break;
	}
	
	return ERROR;
}
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret

000001aa <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
	ERROR_STATUS ERROR = E_OK;
	
	switch (value)
 1aa:	41 11       	cpse	r20, r1
 1ac:	1d c0       	rjmp	.+58     	; 0x1e8 <DIO_Write+0x3e>
	{
		case LOW:
		switch (GPIO)
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	61 f0       	breq	.+24     	; 0x1ca <DIO_Write+0x20>
 1b2:	30 f0       	brcs	.+12     	; 0x1c0 <DIO_Write+0x16>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	71 f0       	breq	.+28     	; 0x1d4 <DIO_Write+0x2a>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	09 f0       	breq	.+2      	; 0x1be <DIO_Write+0x14>
 1bc:	44 c0       	rjmp	.+136    	; 0x246 <DIO_Write+0x9c>
 1be:	0f c0       	rjmp	.+30     	; 0x1de <DIO_Write+0x34>
		{
			case GPIOA:
			PORTA_DATA &= ~pins;
 1c0:	8b b3       	in	r24, 0x1b	; 27
 1c2:	60 95       	com	r22
 1c4:	68 23       	and	r22, r24
 1c6:	6b bb       	out	0x1b, r22	; 27
			break;
 1c8:	3e c0       	rjmp	.+124    	; 0x246 <DIO_Write+0x9c>
			case GPIOB:
			PORTB_DATA &= ~pins;
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	60 95       	com	r22
 1ce:	68 23       	and	r22, r24
 1d0:	68 bb       	out	0x18, r22	; 24
			break;
 1d2:	39 c0       	rjmp	.+114    	; 0x246 <DIO_Write+0x9c>
			case GPIOC:
			PORTC_DATA &= ~pins;
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	60 95       	com	r22
 1d8:	68 23       	and	r22, r24
 1da:	65 bb       	out	0x15, r22	; 21
			break;
 1dc:	34 c0       	rjmp	.+104    	; 0x246 <DIO_Write+0x9c>
			case GPIOD:
			PORTD_DATA &= ~pins;
 1de:	82 b3       	in	r24, 0x12	; 18
 1e0:	60 95       	com	r22
 1e2:	68 23       	and	r22, r24
 1e4:	62 bb       	out	0x12, r22	; 18
			break;
 1e6:	2f c0       	rjmp	.+94     	; 0x246 <DIO_Write+0x9c>
		}
		break;
		default:
		switch (GPIO)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	81 f0       	breq	.+32     	; 0x20c <DIO_Write+0x62>
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <DIO_Write+0x4e>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	b9 f0       	breq	.+46     	; 0x220 <DIO_Write+0x76>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	41 f5       	brne	.+80     	; 0x246 <DIO_Write+0x9c>
 1f6:	1e c0       	rjmp	.+60     	; 0x234 <DIO_Write+0x8a>
		{
			case GPIOA:
			{
				PORTA_DATA &= ~pins;
 1f8:	8b b3       	in	r24, 0x1b	; 27
 1fa:	96 2f       	mov	r25, r22
 1fc:	90 95       	com	r25
 1fe:	89 23       	and	r24, r25
 200:	8b bb       	out	0x1b, r24	; 27
				pins &= value;
				PORTA_DATA |= pins;
 202:	8b b3       	in	r24, 0x1b	; 27
		switch (GPIO)
		{
			case GPIOA:
			{
				PORTA_DATA &= ~pins;
				pins &= value;
 204:	46 23       	and	r20, r22
				PORTA_DATA |= pins;
 206:	48 2b       	or	r20, r24
 208:	4b bb       	out	0x1b, r20	; 27
			}
			break;
 20a:	1d c0       	rjmp	.+58     	; 0x246 <DIO_Write+0x9c>
			case GPIOB:
			{
				PORTB_DATA &= ~pins;
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	96 2f       	mov	r25, r22
 210:	90 95       	com	r25
 212:	89 23       	and	r24, r25
 214:	88 bb       	out	0x18, r24	; 24
				pins &= value;
				PORTB_DATA |= pins;
 216:	88 b3       	in	r24, 0x18	; 24
			}
			break;
			case GPIOB:
			{
				PORTB_DATA &= ~pins;
				pins &= value;
 218:	46 23       	and	r20, r22
				PORTB_DATA |= pins;
 21a:	48 2b       	or	r20, r24
 21c:	48 bb       	out	0x18, r20	; 24
			}
			break;
 21e:	13 c0       	rjmp	.+38     	; 0x246 <DIO_Write+0x9c>
			case GPIOC:
			{
				PORTC_DATA &= ~pins;
 220:	85 b3       	in	r24, 0x15	; 21
 222:	96 2f       	mov	r25, r22
 224:	90 95       	com	r25
 226:	89 23       	and	r24, r25
 228:	85 bb       	out	0x15, r24	; 21
				pins &= value;
				PORTC_DATA |= pins;
 22a:	85 b3       	in	r24, 0x15	; 21
			}
			break;
			case GPIOC:
			{
				PORTC_DATA &= ~pins;
				pins &= value;
 22c:	46 23       	and	r20, r22
				PORTC_DATA |= pins;
 22e:	48 2b       	or	r20, r24
 230:	45 bb       	out	0x15, r20	; 21
			}
			break;
 232:	09 c0       	rjmp	.+18     	; 0x246 <DIO_Write+0x9c>
			case GPIOD:
			{
				PORTD_DATA &= ~pins;
 234:	82 b3       	in	r24, 0x12	; 18
 236:	96 2f       	mov	r25, r22
 238:	90 95       	com	r25
 23a:	89 23       	and	r24, r25
 23c:	82 bb       	out	0x12, r24	; 18
				pins &= value;
				PORTD_DATA |= pins;
 23e:	82 b3       	in	r24, 0x12	; 18
			}
			break;
			case GPIOD:
			{
				PORTD_DATA &= ~pins;
				pins &= value;
 240:	46 23       	and	r20, r22
				PORTD_DATA |= pins;
 242:	48 2b       	or	r20, r24
 244:	42 bb       	out	0x12, r20	; 18
			break;
		}
		break;
	}
	return ERROR;
}
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret

0000024a <External_INT_Init>:
 */ 

#include "External_INT.h"

void External_INT_Init(uint8_t INT_CH,uint8_t EDGE)
{
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <External_INT_Init+0x8>
 252:	1f 92       	push	r1
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	16 2f       	mov	r17, r22
	SET_BIT(SREG,(1<<7));								 // Enable interrupts by setting I-bit
 25a:	9f b7       	in	r25, 0x3f	; 63
 25c:	90 68       	ori	r25, 0x80	; 128
 25e:	9f bf       	out	0x3f, r25	; 63

	switch(INT_CH)
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	c9 f4       	brne	.+50     	; 0x296 <External_INT_Init+0x4c>
		break;
		case EXTERNAL_INT_CH1:
		break;
		case EXTERNAL_INT_CH2:
		{
			DIO_Cfg_s DIO_cfg_PB2 = {GPIOB,BIT2,INPUT};
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	8a 83       	std	Y+2, r24	; 0x02
 26c:	1b 82       	std	Y+3, r1	; 0x03
			DIO_init(&DIO_cfg_PB2);
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
			DIO_Write(GPIOB,BIT2,HIGH);
 276:	4f ef       	ldi	r20, 0xFF	; 255
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			
			switch(EDGE)
 280:	12 30       	cpi	r17, 0x02	; 2
 282:	31 f0       	breq	.+12     	; 0x290 <External_INT_Init+0x46>
 284:	13 30       	cpi	r17, 0x03	; 3
 286:	39 f4       	brne	.+14     	; 0x296 <External_INT_Init+0x4c>
			{
				case EdgeRisiging:
				SET_BIT(MCUCSR,(1<<6));			         // Trigger INT2 with the raising edge
 288:	84 b7       	in	r24, 0x34	; 52
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	84 bf       	out	0x34, r24	; 52
				break;
 28e:	03 c0       	rjmp	.+6      	; 0x296 <External_INT_Init+0x4c>

				case EdgeFalling:
				CLEAR_BIT(MCUCSR,(1<<6));				 // Trigger INT2 with the falling edge
 290:	84 b7       	in	r24, 0x34	; 52
 292:	8f 7b       	andi	r24, 0xBF	; 191
 294:	84 bf       	out	0x34, r24	; 52
		break;
		default:
		break;
	}

}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <External_INT_Enable>:


void External_INT_Enable(uint8_t INT_CH,uint8_t EDGE)
{
	switch(INT_CH)
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	89 f4       	brne	.+34     	; 0x2ca <External_INT_Enable+0x26>
		break;
		case EXTERNAL_INT_CH1:
		break;
		case EXTERNAL_INT_CH2:
		{
			switch(EDGE)
 2a8:	62 30       	cpi	r22, 0x02	; 2
 2aa:	49 f0       	breq	.+18     	; 0x2be <External_INT_Enable+0x1a>
 2ac:	63 30       	cpi	r22, 0x03	; 3
 2ae:	69 f4       	brne	.+26     	; 0x2ca <External_INT_Enable+0x26>
			{
				case EdgeRisiging:
				SET_BIT(GICR,(1<<5));					 // Enable external interrupt pin INT2
 2b0:	8b b7       	in	r24, 0x3b	; 59
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	8b bf       	out	0x3b, r24	; 59
				SET_BIT(MCUCSR,(1<<6));			         // Trigger INT2 with the raising edge
 2b6:	84 b7       	in	r24, 0x34	; 52
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	84 bf       	out	0x34, r24	; 52
				break;
 2bc:	08 95       	ret

				case EdgeFalling:
				SET_BIT(GICR,(1<<5));					 // Enable external interrupt pin INT2
 2be:	8b b7       	in	r24, 0x3b	; 59
 2c0:	80 62       	ori	r24, 0x20	; 32
 2c2:	8b bf       	out	0x3b, r24	; 59
				CLEAR_BIT(MCUCSR,(1<<6));				 // Trigger INT2 with the falling edge
 2c4:	84 b7       	in	r24, 0x34	; 52
 2c6:	8f 7b       	andi	r24, 0xBF	; 191
 2c8:	84 bf       	out	0x34, r24	; 52
 2ca:	08 95       	ret

000002cc <__vector_3>:
 */ 

#include "ICU.h"

ISR(INT2_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	if(ICU_Edge == EdgeRisiging)     						//check if interrupt from rising edge
 2ee:	80 91 63 00 	lds	r24, 0x0063
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	79 f4       	brne	.+30     	; 0x314 <__vector_3+0x48>
	{
		Error = Timer_Start(ICU_TIMER_CH0,T0_MAX_VALUE);	//TCNT0=0;	reset timer0 counter
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 0c 05 	call	0xa18	; 0xa18 <Timer_Start>
 300:	80 93 62 00 	sts	0x0062, r24
		ICU_Edge = EdgeFalling;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 63 00 	sts	0x0063, r24
		
		External_INT_Enable(ICU_CH2,ICU_Edge);				//trigger INT2 with falling edge
 30a:	60 91 63 00 	lds	r22, 0x0063
 30e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <External_INT_Enable>
 312:	08 c0       	rjmp	.+16     	; 0x324 <__vector_3+0x58>
	}
	else
	{
		Error = Timer_Stop(ICU_TIMER_CH0);					//stop timer0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 5a 05 	call	0xab4	; 0xab4 <Timer_Stop>
 31a:	80 93 62 00 	sts	0x0062, r24
		read_flag = 1;										//set flag to read timer
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 61 00 	sts	0x0061, r24
									
	}
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <Icu_Init>:

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{	
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	2a 97       	sbiw	r28, 0x0a	; 10
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	8c 01       	movw	r16, r24
	ERROR_STATUS ERROR = E_OK;
	
	DIO_Cfg_s DIO_cfg_B2 = {GPIOB,BIT2,INPUT};
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	94 e0       	ldi	r25, 0x04	; 4
 366:	9a 83       	std	Y+2, r25	; 0x02
 368:	1b 82       	std	Y+3, r1	; 0x03
	ICU_Edge = EdgeRisiging;
 36a:	93 e0       	ldi	r25, 0x03	; 3
 36c:	90 93 63 00 	sts	0x0063, r25
	
	DIO_Cfg_s DIO_cfg_LEDS = {GPIOB,UPPER_NIBBLE,OUTPUT};
 370:	8c 83       	std	Y+4, r24	; 0x04
 372:	80 ef       	ldi	r24, 0xF0	; 240
 374:	8d 83       	std	Y+5, r24	; 0x05
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	8e 83       	std	Y+6, r24	; 0x06
	DIO_init(&DIO_cfg_LEDS);
 37a:	ce 01       	movw	r24, r28
 37c:	04 96       	adiw	r24, 0x04	; 4
 37e:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
	
	Timer_cfg_s Timer_cfg_T0 ={TIMER_CH0,T0_NORMAL_MODE,6,T0_POLLING};
 382:	1f 82       	std	Y+7, r1	; 0x07
 384:	18 86       	std	Y+8, r1	; 0x08
 386:	86 e0       	ldi	r24, 0x06	; 6
 388:	89 87       	std	Y+9, r24	; 0x09
 38a:	1a 86       	std	Y+10, r1	; 0x0a
	
	SREG |= (1<<7);											//Enable global interrupt
 38c:	8f b7       	in	r24, 0x3f	; 63
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	8f bf       	out	0x3f, r24	; 63
	
	External_INT_Init(ICU_CH2,EdgeRisiging);			    //Initialize INT2 with rising edge
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 25 01 	call	0x24a	; 0x24a <External_INT_Init>
	
	switch(Icu_Cfg->ICU_Ch_No)
 39a:	f8 01       	movw	r30, r16
 39c:	80 81       	ld	r24, Z
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	21 f4       	brne	.+8      	; 0x3aa <Icu_Init+0x64>
		break;
		case ICU_CH1:
		ERROR = E_NOK;
		break;
		case ICU_CH2:
		ERROR = DIO_init(&DIO_cfg_B2);
 3a2:	ce 01       	movw	r24, r28
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
		default:
		ERROR = E_NOK;
		break;
	}	
	
	switch(Icu_Cfg->ICU_Ch_Timer)
 3aa:	f8 01       	movw	r30, r16
 3ac:	81 81       	ldd	r24, Z+1	; 0x01
 3ae:	81 11       	cpse	r24, r1
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <Icu_Init+0x76>
	{
		case ICU_TIMER_CH0:
		ERROR = Timer_Init(&Timer_cfg_T0);
 3b2:	ce 01       	movw	r24, r28
 3b4:	07 96       	adiw	r24, 0x07	; 7
 3b6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Timer_Init>
		break;
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <Icu_Init+0x78>
		case ICU_TIMER_CH1:
		ERROR = E_NOK;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
		default:
		ERROR = E_NOK;
		break;
	}
	return ERROR;
}
 3be:	2a 96       	adiw	r28, 0x0a	; 10
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	08 95       	ret

000003d4 <Icu_ReadTime>:

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <Icu_ReadTime+0xe>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	7a 01       	movw	r14, r20
	ERROR_STATUS ERROR = E_OK;
	uint16_t Timer_read = 0;
 3e8:	1a 82       	std	Y+2, r1	; 0x02
 3ea:	19 82       	std	Y+1, r1	; 0x01
	
	ICU_Edge = EdgeRisiging;
 3ec:	93 e0       	ldi	r25, 0x03	; 3
 3ee:	90 93 63 00 	sts	0x0063, r25
	
	switch(Icu_Channel)
 3f2:	88 23       	and	r24, r24
 3f4:	19 f0       	breq	.+6      	; 0x3fc <Icu_ReadTime+0x28>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	19 f5       	brne	.+70     	; 0x440 <Icu_ReadTime+0x6c>
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <Icu_ReadTime+0x2c>
	return ERROR;
}

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
	ERROR_STATUS ERROR = E_OK;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	23 c0       	rjmp	.+70     	; 0x446 <Icu_ReadTime+0x72>
		case ICU_CH1:
		ERROR = E_NOK;
		break;
		case ICU_CH2:
		{			
			switch(Icu_EdgeToEdge)
 400:	61 30       	cpi	r22, 0x01	; 1
 402:	01 f5       	brne	.+64     	; 0x444 <Icu_ReadTime+0x70>
			{
				case ICU_RISE_TO_FALL:
				{
					External_INT_Enable(ICU_CH2,ICU_Edge);				//Enable INT2 with rising edge at first time 
 404:	60 91 63 00 	lds	r22, 0x0063
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <External_INT_Enable>
					while (read_flag == 0)								//wait until a falling edge come and set the read_flag
 40e:	0b c0       	rjmp	.+22     	; 0x426 <Icu_ReadTime+0x52>
					{
						if ((TIFR & 0x01))
 410:	08 b6       	in	r0, 0x38	; 56
 412:	00 fe       	sbrs	r0, 0
 414:	08 c0       	rjmp	.+16     	; 0x426 <Icu_ReadTime+0x52>
						{
							//DIO_Write(GPIOB,BIT6,1);
							OVR_Flow_Counter++;
 416:	80 91 60 00 	lds	r24, 0x0060
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 60 00 	sts	0x0060, r24
							TIFR = TIFR |0x01;
 420:	88 b7       	in	r24, 0x38	; 56
 422:	81 60       	ori	r24, 0x01	; 1
 424:	88 bf       	out	0x38, r24	; 56
			switch(Icu_EdgeToEdge)
			{
				case ICU_RISE_TO_FALL:
				{
					External_INT_Enable(ICU_CH2,ICU_Edge);				//Enable INT2 with rising edge at first time 
					while (read_flag == 0)								//wait until a falling edge come and set the read_flag
 426:	80 91 61 00 	lds	r24, 0x0061
 42a:	88 23       	and	r24, r24
 42c:	89 f3       	breq	.-30     	; 0x410 <Icu_ReadTime+0x3c>
							OVR_Flow_Counter++;
							TIFR = TIFR |0x01;
						}
					}							
					
					ERROR = Timer_GetValue(ICU_TIMER_CH0, &Timer_read);	// read the timer value
 42e:	be 01       	movw	r22, r28
 430:	6f 5f       	subi	r22, 0xFF	; 255
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 71 05 	call	0xae2	; 0xae2 <Timer_GetValue>
					read_flag = 0;
 43a:	10 92 61 00 	sts	0x0061, r1
															//reset the read_flag to be able to read another (HIGH) time
				}
				break;
 43e:	03 c0       	rjmp	.+6      	; 0x446 <Icu_ReadTime+0x72>
	switch(Icu_Channel)
	{
		case ICU_CH0:
		break;
		case ICU_CH1:
		ERROR = E_NOK;
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	01 c0       	rjmp	.+2      	; 0x446 <Icu_ReadTime+0x72>
					read_flag = 0;
															//reset the read_flag to be able to read another (HIGH) time
				}
				break;
				case ICU_FALL_TO_RISE:
				ERROR = E_NOK;
 444:	80 e0       	ldi	r24, 0x00	; 0
		default:
		ERROR = E_NOK;
		break;
	}
	
	*Icu_Time = (OVR_Flow_Counter*T0_MAX_VALUE)+Timer_read;
 446:	90 91 60 00 	lds	r25, 0x0060
 44a:	39 2f       	mov	r19, r25
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	09 81       	ldd	r16, Y+1	; 0x01
 450:	1a 81       	ldd	r17, Y+2	; 0x02
 452:	02 0f       	add	r16, r18
 454:	13 1f       	adc	r17, r19
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f7 01       	movw	r30, r14
 45c:	00 83       	st	Z, r16
 45e:	11 83       	std	Z+1, r17	; 0x01
 460:	22 83       	std	Z+2, r18	; 0x02
 462:	33 83       	std	Z+3, r19	; 0x03
	OVR_Flow_Counter = 0;
 464:	10 92 60 00 	sts	0x0060, r1
	return ERROR;
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	ff 90       	pop	r15
 476:	ef 90       	pop	r14
 478:	08 95       	ret

0000047a <Motor_Init>:
 */ 

#include "motor.h"

ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	2c 97       	sbiw	r28, 0x0c	; 12
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
 494:	f8 2e       	mov	r15, r24
	ERROR_STATUS ERROR= E_OK;
	
	/*setting the direction of all motors pins*/
	DIO_Cfg_s dio_cfg_Mot1A = {MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,OUTPUT};
 496:	03 e0       	ldi	r16, 0x03	; 3
 498:	09 83       	std	Y+1, r16	; 0x01
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	8a 83       	std	Y+2, r24	; 0x02
 49e:	1f ef       	ldi	r17, 0xFF	; 255
 4a0:	1b 83       	std	Y+3, r17	; 0x03
	DIO_init(&dio_cfg_Mot1A);
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
	DIO_Cfg_s dio_cfg_Mot1B = {MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,OUTPUT};
 4aa:	0c 83       	std	Y+4, r16	; 0x04
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	8d 83       	std	Y+5, r24	; 0x05
 4b0:	1e 83       	std	Y+6, r17	; 0x06
	DIO_init(&dio_cfg_Mot1B);
 4b2:	ce 01       	movw	r24, r28
 4b4:	04 96       	adiw	r24, 0x04	; 4
 4b6:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
	
	DIO_Cfg_s dio_cfg_Mot2A = {MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,OUTPUT};
 4ba:	0f 83       	std	Y+7, r16	; 0x07
 4bc:	80 e4       	ldi	r24, 0x40	; 64
 4be:	88 87       	std	Y+8, r24	; 0x08
 4c0:	19 87       	std	Y+9, r17	; 0x09
	DIO_init(&dio_cfg_Mot2A);
 4c2:	ce 01       	movw	r24, r28
 4c4:	07 96       	adiw	r24, 0x07	; 7
 4c6:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
	DIO_Cfg_s dio_cfg_Mot2B = {MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,OUTPUT};
 4ca:	0a 87       	std	Y+10, r16	; 0x0a
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	8b 87       	std	Y+11, r24	; 0x0b
 4d0:	1c 87       	std	Y+12, r17	; 0x0c
	DIO_init(&dio_cfg_Mot2B);
 4d2:	ce 01       	movw	r24, r28
 4d4:	0a 96       	adiw	r24, 0x0a	; 10
 4d6:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
				
	switch(Motor_Number)
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	f8 16       	cp	r15, r24
 4de:	21 f0       	breq	.+8      	; 0x4e8 <Motor_Init+0x6e>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	f8 12       	cpse	r15, r24
 4e4:	09 c0       	rjmp	.+18     	; 0x4f8 <Motor_Init+0x7e>
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <Motor_Init+0x76>
	{	
		case MOTOR_1:						
		Motor1_Init_flag = MOTOR_INITIALIZED;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	80 93 64 00 	sts	0x0064, r24
		break;
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <Motor_Init+0x80>
		case MOTOR_2:			
		Motor2_Init_flag = MOTOR_INITIALIZED;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 65 00 	sts	0x0065, r24
		break;	
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <Motor_Init+0x80>
		default:
		ERROR = E_NOK; 
 4f8:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return ERROR;
}
 4fa:	2c 96       	adiw	r28, 0x0c	; 12
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	08 95       	ret

00000512 <Motor_Direction>:
ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	ERROR_STATUS ERROR = E_OK;
	
	/*Setting the direction of the motors by changing the polarity through A and B*/
	switch(Motor_Number){
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	21 f0       	breq	.+8      	; 0x51e <Motor_Direction+0xc>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	09 f0       	breq	.+2      	; 0x51c <Motor_Direction+0xa>
 51a:	60 c0       	rjmp	.+192    	; 0x5dc <Motor_Direction+0xca>
 51c:	30 c0       	rjmp	.+96     	; 0x57e <Motor_Direction+0x6c>
		
		case MOTOR_1:
		switch(Motor_Direction){
 51e:	61 30       	cpi	r22, 0x01	; 1
 520:	61 f0       	breq	.+24     	; 0x53a <Motor_Direction+0x28>
 522:	20 f0       	brcs	.+8      	; 0x52c <Motor_Direction+0x1a>
 524:	62 30       	cpi	r22, 0x02	; 2
 526:	09 f0       	breq	.+2      	; 0x52a <Motor_Direction+0x18>
 528:	5b c0       	rjmp	.+182    	; 0x5e0 <Motor_Direction+0xce>
 52a:	18 c0       	rjmp	.+48     	; 0x55c <Motor_Direction+0x4a>
			case MOTOR_STOP:
			DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,0);
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	60 e1       	ldi	r22, 0x10	; 16
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	return ERROR;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	ERROR_STATUS ERROR = E_OK;
 536:	81 e0       	ldi	r24, 0x01	; 1
		
		case MOTOR_1:
		switch(Motor_Direction){
			case MOTOR_STOP:
			DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,0);
			break;
 538:	08 95       	ret
			
			case MOTOR_FORWARD:
			DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
 53a:	4f ef       	ldi	r20, 0xFF	; 255
 53c:	60 e1       	ldi	r22, 0x10	; 16
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
 544:	4f ef       	ldi	r20, 0xFF	; 255
 546:	64 e0       	ldi	r22, 0x04	; 4
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,0);
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	68 e0       	ldi	r22, 0x08	; 8
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	return ERROR;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	ERROR_STATUS ERROR = E_OK;
 558:	81 e0       	ldi	r24, 0x01	; 1
			
			case MOTOR_FORWARD:
			DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
			DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
			DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,0);
			break;
 55a:	08 95       	ret
			
			case MOTOR_BACKWARD:
			DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
 55c:	4f ef       	ldi	r20, 0xFF	; 255
 55e:	60 e1       	ldi	r22, 0x10	; 16
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,0);
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	64 e0       	ldi	r22, 0x04	; 4
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
 570:	4f ef       	ldi	r20, 0xFF	; 255
 572:	68 e0       	ldi	r22, 0x08	; 8
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	return ERROR;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	ERROR_STATUS ERROR = E_OK;
 57a:	81 e0       	ldi	r24, 0x01	; 1
			
			case MOTOR_BACKWARD:
			DIO_Write(MOTOR_EN_1_GPIO,MOTOR_EN_1_BIT,HIGH);
			DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,0);
			DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
			break;
 57c:	08 95       	ret
			ERROR = E_NOK; 
			break;
		}
		break;
		case MOTOR_2:
		switch(Motor_Direction){
 57e:	61 30       	cpi	r22, 0x01	; 1
 580:	59 f0       	breq	.+22     	; 0x598 <Motor_Direction+0x86>
 582:	18 f0       	brcs	.+6      	; 0x58a <Motor_Direction+0x78>
 584:	62 30       	cpi	r22, 0x02	; 2
 586:	71 f5       	brne	.+92     	; 0x5e4 <Motor_Direction+0xd2>
 588:	18 c0       	rjmp	.+48     	; 0x5ba <Motor_Direction+0xa8>
			case MOTOR_STOP:
			DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,0);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	60 e2       	ldi	r22, 0x20	; 32
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	return ERROR;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	ERROR_STATUS ERROR = E_OK;
 594:	81 e0       	ldi	r24, 0x01	; 1
		break;
		case MOTOR_2:
		switch(Motor_Direction){
			case MOTOR_STOP:
			DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,0);
			break;
 596:	08 95       	ret
			
			case MOTOR_FORWARD:
			DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
 598:	4f ef       	ldi	r20, 0xFF	; 255
 59a:	60 e2       	ldi	r22, 0x20	; 32
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
 5a2:	4f ef       	ldi	r20, 0xFF	; 255
 5a4:	60 e4       	ldi	r22, 0x40	; 64
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,0);
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	60 e8       	ldi	r22, 0x80	; 128
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	return ERROR;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	ERROR_STATUS ERROR = E_OK;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
			
			case MOTOR_FORWARD:
			DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
			DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
			DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,0);
			break;
 5b8:	08 95       	ret
			
			case MOTOR_BACKWARD:
			DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
 5ba:	4f ef       	ldi	r20, 0xFF	; 255
 5bc:	60 e2       	ldi	r22, 0x20	; 32
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,0);
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	60 e4       	ldi	r22, 0x40	; 64
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
			DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
 5ce:	4f ef       	ldi	r20, 0xFF	; 255
 5d0:	60 e8       	ldi	r22, 0x80	; 128
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	return ERROR;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
	ERROR_STATUS ERROR = E_OK;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
			
			case MOTOR_BACKWARD:
			DIO_Write(MOTOR_EN_2_GPIO,MOTOR_EN_2_BIT,HIGH);
			DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,0);
			DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
			break;
 5da:	08 95       	ret
			ERROR = E_NOK; 
			break;
		}
		break;
		default: 
		ERROR = E_NOK;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	08 95       	ret
			DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,0);
			DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
			break;
			
			default:
			ERROR = E_NOK; 
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	08 95       	ret
			DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,0);
			DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
			break;
			
			default:
			ERROR = E_NOK; 
 5e4:	80 e0       	ldi	r24, 0x00	; 0
		ERROR = E_NOK;
		break;
	}
	
	return ERROR;
}
 5e6:	08 95       	ret

000005e8 <Motor_Start>:

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <Motor_Start+0x8>
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <Motor_Start+0xa>
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	16 2f       	mov	r17, r22
	ERROR_STATUS ERROR = E_OK;
	
	Motor_flag = MOTOR_STARTED;
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	90 93 66 00 	sts	0x0066, r25
	
	Pwm_Cfg_s pwm_cfg_CH1A = {PWM_CH1A,PWM_PRESCALER_64};
 5fe:	99 83       	std	Y+1, r25	; 0x01
 600:	93 e0       	ldi	r25, 0x03	; 3
 602:	9a 83       	std	Y+2, r25	; 0x02
	Pwm_Cfg_s pwm_cfg_CH1B = {PWM_CH1B,PWM_PRESCALER_64};
 604:	22 e0       	ldi	r18, 0x02	; 2
 606:	2b 83       	std	Y+3, r18	; 0x03
 608:	9c 83       	std	Y+4, r25	; 0x04
		
	/*Start the motor by starting the pwm with the required speed*/
	switch(Motor_Number)
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	19 f0       	breq	.+6      	; 0x614 <Motor_Start+0x2c>
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	d9 f4       	brne	.+54     	; 0x648 <Motor_Start+0x60>
 612:	0d c0       	rjmp	.+26     	; 0x62e <Motor_Start+0x46>
	{
		case MOTOR_1:		
		ERROR = Pwm_Init(&pwm_cfg_CH1A);			
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	0e 94 40 03 	call	0x680	; 0x680 <Pwm_Init>
		ERROR = Pwm_Start(PWM_CH1A,Mot_Speed,200);
 61c:	28 ec       	ldi	r18, 0xC8	; 200
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	61 2f       	mov	r22, r17
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 ab 03 	call	0x756	; 0x756 <Pwm_Start>
		break;
 62c:	0e c0       	rjmp	.+28     	; 0x64a <Motor_Start+0x62>
		case MOTOR_2:		
		ERROR = Pwm_Init(&pwm_cfg_CH1B);
 62e:	ce 01       	movw	r24, r28
 630:	03 96       	adiw	r24, 0x03	; 3
 632:	0e 94 40 03 	call	0x680	; 0x680 <Pwm_Init>
		ERROR = Pwm_Start(PWM_CH1B,Mot_Speed,200);
 636:	28 ec       	ldi	r18, 0xC8	; 200
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	61 2f       	mov	r22, r17
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	0e 94 ab 03 	call	0x756	; 0x756 <Pwm_Start>
		break;
 646:	01 c0       	rjmp	.+2      	; 0x64a <Motor_Start+0x62>
		default:
		ERROR = E_NOK;
 648:	80 e0       	ldi	r24, 0x00	; 0
		break;	
	}
	return ERROR;
}
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	08 95       	ret

0000065a <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	ERROR_STATUS ERROR = E_OK;
	
	Motor_flag = MOTOR_STOPED;
 65a:	10 92 66 00 	sts	0x0066, r1
	
	/*stop the motor by stoping the pwm*/
	switch(Motor_Number)
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	19 f0       	breq	.+6      	; 0x668 <Motor_Stop+0xe>
 662:	82 30       	cpi	r24, 0x02	; 2
 664:	59 f4       	brne	.+22     	; 0x67c <Motor_Stop+0x22>
 666:	05 c0       	rjmp	.+10     	; 0x672 <Motor_Stop+0x18>
	{
		case MOTOR_1:
		Pwm_Stop(PWM_CH1A);
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Pwm_Stop>
	return ERROR;
}

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	ERROR_STATUS ERROR = E_OK;
 66e:	81 e0       	ldi	r24, 0x01	; 1
	/*stop the motor by stoping the pwm*/
	switch(Motor_Number)
	{
		case MOTOR_1:
		Pwm_Stop(PWM_CH1A);
		break;		
 670:	08 95       	ret
				
		case MOTOR_2:
		Pwm_Stop(PWM_CH1B);
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	0e 94 da 03 	call	0x7b4	; 0x7b4 <Pwm_Stop>
	return ERROR;
}

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	ERROR_STATUS ERROR = E_OK;
 678:	81 e0       	ldi	r24, 0x01	; 1
		Pwm_Stop(PWM_CH1A);
		break;		
				
		case MOTOR_2:
		Pwm_Stop(PWM_CH1B);
		break;
 67a:	08 95       	ret
		default:
		ERROR = E_NOK;
 67c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	
	return ERROR;
}
 67e:	08 95       	ret

00000680 <Pwm_Init>:
 */ 

#include "PWM.h"

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	00 d0       	rcall	.+0      	; 0x686 <Pwm_Init+0x6>
 686:	1f 92       	push	r1
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS ERROR = E_OK;
	
	switch(Pwm_Cfg->Channel)
 68c:	fc 01       	movw	r30, r24
 68e:	80 81       	ld	r24, Z
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	21 f0       	breq	.+8      	; 0x69c <Pwm_Init+0x1c>
 694:	82 30       	cpi	r24, 0x02	; 2
 696:	09 f0       	breq	.+2      	; 0x69a <Pwm_Init+0x1a>
 698:	57 c0       	rjmp	.+174    	; 0x748 <Pwm_Init+0xc8>
 69a:	2d c0       	rjmp	.+90     	; 0x6f6 <Pwm_Init+0x76>
		case PWM_CH0:
		ERROR = E_NOK;
		break;
		case PWM_CH1A:
		{
			DIO_Cfg_s DIO_cfg_B4 = {GPIOD,BIT4,OUTPUT};
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	89 83       	std	Y+1, r24	; 0x01
 6a0:	80 e1       	ldi	r24, 0x10	; 16
 6a2:	8a 83       	std	Y+2, r24	; 0x02
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	8b 83       	std	Y+3, r24	; 0x03
			
			CLEAR_BIT(TCNT1,0xFFFF);
 6a8:	8c b5       	in	r24, 0x2c	; 44
 6aa:	9d b5       	in	r25, 0x2d	; 45
 6ac:	1d bc       	out	0x2d, r1	; 45
 6ae:	1c bc       	out	0x2c, r1	; 44
			CLEAR_BIT(ICR1,0xFFFF);
 6b0:	86 b5       	in	r24, 0x26	; 38
 6b2:	97 b5       	in	r25, 0x27	; 39
 6b4:	17 bc       	out	0x27, r1	; 39
 6b6:	16 bc       	out	0x26, r1	; 38
			CLEAR_BIT(OCR1A,0xFF);
 6b8:	8a b5       	in	r24, 0x2a	; 42
 6ba:	9b b5       	in	r25, 0x2b	; 43
 6bc:	88 27       	eor	r24, r24
 6be:	9b bd       	out	0x2b, r25	; 43
 6c0:	8a bd       	out	0x2a, r24	; 42
			
			SET_BIT(TCNT1,0x0000);
 6c2:	8c b5       	in	r24, 0x2c	; 44
 6c4:	9d b5       	in	r25, 0x2d	; 45
 6c6:	9d bd       	out	0x2d, r25	; 45
 6c8:	8c bd       	out	0x2c, r24	; 44
			SET_BIT(TCCR1,(0x0218|0x8000));
 6ca:	8e b5       	in	r24, 0x2e	; 46
 6cc:	9f b5       	in	r25, 0x2f	; 47
 6ce:	88 61       	ori	r24, 0x18	; 24
 6d0:	92 68       	ori	r25, 0x82	; 130
 6d2:	9f bd       	out	0x2f, r25	; 47
 6d4:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(OCR1A,0x0000);
 6d6:	8a b5       	in	r24, 0x2a	; 42
 6d8:	9b b5       	in	r25, 0x2b	; 43
 6da:	9b bd       	out	0x2b, r25	; 43
 6dc:	8a bd       	out	0x2a, r24	; 42
			SET_BIT(ICR1,0x00FF);
 6de:	86 b5       	in	r24, 0x26	; 38
 6e0:	97 b5       	in	r25, 0x27	; 39
 6e2:	8f 6f       	ori	r24, 0xFF	; 255
 6e4:	97 bd       	out	0x27, r25	; 39
 6e6:	86 bd       	out	0x26, r24	; 38
			SET_BIT(TIMSK,0);
 6e8:	89 b7       	in	r24, 0x39	; 57
 6ea:	89 bf       	out	0x39, r24	; 57
				
			ERROR = DIO_init(&DIO_cfg_B4);		
 6ec:	ce 01       	movw	r24, r28
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
		
		}
		break;
 6f4:	2a c0       	rjmp	.+84     	; 0x74a <Pwm_Init+0xca>
		case PWM_CH1B:
		{
			DIO_Cfg_s DIO_cfg_B5 = {GPIOD,BIT5,OUTPUT};
 6f6:	83 e0       	ldi	r24, 0x03	; 3
 6f8:	89 83       	std	Y+1, r24	; 0x01
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	8a 83       	std	Y+2, r24	; 0x02
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	8b 83       	std	Y+3, r24	; 0x03
				
			CLEAR_BIT(TCNT1,0xFFFF);
 702:	8c b5       	in	r24, 0x2c	; 44
 704:	9d b5       	in	r25, 0x2d	; 45
 706:	1d bc       	out	0x2d, r1	; 45
 708:	1c bc       	out	0x2c, r1	; 44
			CLEAR_BIT(OCR1B,0xFF);
 70a:	88 b5       	in	r24, 0x28	; 40
 70c:	99 b5       	in	r25, 0x29	; 41
 70e:	88 27       	eor	r24, r24
 710:	99 bd       	out	0x29, r25	; 41
 712:	88 bd       	out	0x28, r24	; 40
			
			SET_BIT(TCNT1,0x0000);
 714:	8c b5       	in	r24, 0x2c	; 44
 716:	9d b5       	in	r25, 0x2d	; 45
 718:	9d bd       	out	0x2d, r25	; 45
 71a:	8c bd       	out	0x2c, r24	; 44
			SET_BIT(TCCR1,(0x0218|0x2000));
 71c:	8e b5       	in	r24, 0x2e	; 46
 71e:	9f b5       	in	r25, 0x2f	; 47
 720:	88 61       	ori	r24, 0x18	; 24
 722:	92 62       	ori	r25, 0x22	; 34
 724:	9f bd       	out	0x2f, r25	; 47
 726:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(OCR1B,0x0000);
 728:	88 b5       	in	r24, 0x28	; 40
 72a:	99 b5       	in	r25, 0x29	; 41
 72c:	99 bd       	out	0x29, r25	; 41
 72e:	88 bd       	out	0x28, r24	; 40
			SET_BIT(ICR1,0x00FF);
 730:	86 b5       	in	r24, 0x26	; 38
 732:	97 b5       	in	r25, 0x27	; 39
 734:	8f 6f       	ori	r24, 0xFF	; 255
 736:	97 bd       	out	0x27, r25	; 39
 738:	86 bd       	out	0x26, r24	; 38
			SET_BIT(TIMSK,0);
 73a:	89 b7       	in	r24, 0x39	; 57
 73c:	89 bf       	out	0x39, r24	; 57
					
			ERROR = DIO_init(&DIO_cfg_B5);
 73e:	ce 01       	movw	r24, r28
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>
			
		}
		break;
 746:	01 c0       	rjmp	.+2      	; 0x74a <Pwm_Init+0xca>
	ERROR_STATUS ERROR = E_OK;
	
	switch(Pwm_Cfg->Channel)
	{
		case PWM_CH0:
		ERROR = E_NOK;
 748:	80 e0       	ldi	r24, 0x00	; 0
		default:
		ERROR = E_NOK;
	}
			
	return ERROR;	
}
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	08 95       	ret

00000756 <Pwm_Start>:

ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
 756:	28 2f       	mov	r18, r24
	ERROR_STATUS ERROR = E_OK;
	uint8_t OCR_TOP_Value = 0;
	
	PWM_Status = PWM_STARTED;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	80 93 69 00 	sts	0x0069, r24
	OCR_TOP_Value = (Duty*255)/100;
 75e:	3f ef       	ldi	r19, 0xFF	; 255
 760:	63 9f       	mul	r22, r19
 762:	c0 01       	movw	r24, r0
 764:	11 24       	eor	r1, r1
 766:	64 e6       	ldi	r22, 0x64	; 100
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__divmodhi4>
	
	switch(Channel)
 76e:	21 30       	cpi	r18, 0x01	; 1
 770:	39 f0       	breq	.+14     	; 0x780 <Pwm_Start+0x2a>
 772:	f0 f0       	brcs	.+60     	; 0x7b0 <Pwm_Start+0x5a>
 774:	22 30       	cpi	r18, 0x02	; 2
 776:	81 f0       	breq	.+32     	; 0x798 <Pwm_Start+0x42>
 778:	23 30       	cpi	r18, 0x03	; 3
 77a:	d1 f0       	breq	.+52     	; 0x7b0 <Pwm_Start+0x5a>
	return ERROR;	
}

ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
	ERROR_STATUS ERROR = E_OK;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	08 95       	ret
	{
		case PWM_CH0:
		ERROR = E_NOK;
		break;
		case PWM_CH1A:
		SET_BIT(OCR1A,OCR_TOP_Value);
 780:	8a b5       	in	r24, 0x2a	; 42
 782:	9b b5       	in	r25, 0x2b	; 43
 784:	86 2b       	or	r24, r22
 786:	9b bd       	out	0x2b, r25	; 43
 788:	8a bd       	out	0x2a, r24	; 42
		SET_BIT(TCCR1,0x0003);
 78a:	8e b5       	in	r24, 0x2e	; 46
 78c:	9f b5       	in	r25, 0x2f	; 47
 78e:	83 60       	ori	r24, 0x03	; 3
 790:	9f bd       	out	0x2f, r25	; 47
 792:	8e bd       	out	0x2e, r24	; 46
	return ERROR;	
}

ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
	ERROR_STATUS ERROR = E_OK;
 794:	81 e0       	ldi	r24, 0x01	; 1
		ERROR = E_NOK;
		break;
		case PWM_CH1A:
		SET_BIT(OCR1A,OCR_TOP_Value);
		SET_BIT(TCCR1,0x0003);
		break;
 796:	08 95       	ret
		case PWM_CH1B:
		SET_BIT(OCR1B,OCR_TOP_Value);
 798:	88 b5       	in	r24, 0x28	; 40
 79a:	99 b5       	in	r25, 0x29	; 41
 79c:	86 2b       	or	r24, r22
 79e:	99 bd       	out	0x29, r25	; 41
 7a0:	88 bd       	out	0x28, r24	; 40
		SET_BIT(TCCR1,0x0003);
 7a2:	8e b5       	in	r24, 0x2e	; 46
 7a4:	9f b5       	in	r25, 0x2f	; 47
 7a6:	83 60       	ori	r24, 0x03	; 3
 7a8:	9f bd       	out	0x2f, r25	; 47
 7aa:	8e bd       	out	0x2e, r24	; 46
	return ERROR;	
}

ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
	ERROR_STATUS ERROR = E_OK;
 7ac:	81 e0       	ldi	r24, 0x01	; 1
		SET_BIT(TCCR1,0x0003);
		break;
		case PWM_CH1B:
		SET_BIT(OCR1B,OCR_TOP_Value);
		SET_BIT(TCCR1,0x0003);
		break;
 7ae:	08 95       	ret
	OCR_TOP_Value = (Duty*255)/100;
	
	switch(Channel)
	{
		case PWM_CH0:
		ERROR = E_NOK;
 7b0:	80 e0       	ldi	r24, 0x00	; 0
		ERROR = E_NOK;
		break;
	}
	
	return ERROR;
}
 7b2:	08 95       	ret

000007b4 <Pwm_Stop>:

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	ERROR_STATUS ERROR = E_OK;
	
	switch(Channel)
 7b4:	82 30       	cpi	r24, 0x02	; 2
 7b6:	59 f0       	breq	.+22     	; 0x7ce <Pwm_Stop+0x1a>
 7b8:	83 30       	cpi	r24, 0x03	; 3
 7ba:	81 f0       	breq	.+32     	; 0x7dc <Pwm_Stop+0x28>
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	99 f4       	brne	.+38     	; 0x7e6 <Pwm_Stop+0x32>
	{
		case PWM_CH0:
		ERROR = E_NOK;
		break;
		case PWM_CH1A:
		CLEAR_BIT(TCCR1B,0x07);
 7c0:	8e b5       	in	r24, 0x2e	; 46
 7c2:	88 7f       	andi	r24, 0xF8	; 248
 7c4:	8e bd       	out	0x2e, r24	; 46
		PWM_Status = PWM_STOPED;
 7c6:	10 92 69 00 	sts	0x0069, r1
	return ERROR;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	ERROR_STATUS ERROR = E_OK;
 7ca:	81 e0       	ldi	r24, 0x01	; 1
		ERROR = E_NOK;
		break;
		case PWM_CH1A:
		CLEAR_BIT(TCCR1B,0x07);
		PWM_Status = PWM_STOPED;
		break;
 7cc:	08 95       	ret
		case PWM_CH1B:
		CLEAR_BIT(TCCR1B,0x07);
 7ce:	8e b5       	in	r24, 0x2e	; 46
 7d0:	88 7f       	andi	r24, 0xF8	; 248
 7d2:	8e bd       	out	0x2e, r24	; 46
		PWM_Status = PWM_STOPED;
 7d4:	10 92 69 00 	sts	0x0069, r1
	return ERROR;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	ERROR_STATUS ERROR = E_OK;
 7d8:	81 e0       	ldi	r24, 0x01	; 1
		PWM_Status = PWM_STOPED;
		break;
		case PWM_CH1B:
		CLEAR_BIT(TCCR1B,0x07);
		PWM_Status = PWM_STOPED;
		break;
 7da:	08 95       	ret
		case PWM_CH2:
		Timer_Stop(TIMER_CH2);
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	0e 94 5a 05 	call	0xab4	; 0xab4 <Timer_Stop>
	return ERROR;
}

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
	ERROR_STATUS ERROR = E_OK;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
		CLEAR_BIT(TCCR1B,0x07);
		PWM_Status = PWM_STOPED;
		break;
		case PWM_CH2:
		Timer_Stop(TIMER_CH2);
		break;
 7e4:	08 95       	ret
	ERROR_STATUS ERROR = E_OK;
	
	switch(Channel)
	{
		case PWM_CH0:
		ERROR = E_NOK;
 7e6:	80 e0       	ldi	r24, 0x00	; 0
		ERROR = E_NOK;
		break;
	}
	
	return ERROR;
 7e8:	08 95       	ret

000007ea <main>:
	Timer_Init(&Tim_cfg);
	
	Timer_Start(TIMER_CH0,T0_MAX_VALUE);
	*/
	/*initialize the car control*/
	Car_SM_Init();
 7ea:	0e 94 3e 00 	call	0x7c	; 0x7c <Car_SM_Init>
	
    while(1)
    {
		/*keep updating the car control with new data and giving different controls according to the input data*/
		Car_SM_Update();
 7ee:	0e 94 47 00 	call	0x8e	; 0x8e <Car_SM_Update>
 7f2:	fd cf       	rjmp	.-6      	; 0x7ee <main+0x4>

000007f4 <Steering_Init>:

 ERROR_STATUS Steering_Init(void)
 {
    ERROR_STATUS ERROR = E_OK;
	 
	 ERROR = Motor_Init(MOTOR_1);
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	0e 94 3d 02 	call	0x47a	; 0x47a <Motor_Init>
	 ERROR = Motor_Init(MOTOR_2);
 7fa:	82 e0       	ldi	r24, 0x02	; 2
 7fc:	0e 94 3d 02 	call	0x47a	; 0x47a <Motor_Init>

	 return ERROR;
 }
 800:	08 95       	ret

00000802 <Steering_SteerCar>:

 ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
 {
 802:	cf 93       	push	r28
 804:	c6 2f       	mov	r28, r22
    ERROR_STATUS ERROR = E_OK;
	
	 switch (Steering_CarCmd)
 806:	82 30       	cpi	r24, 0x02	; 2
 808:	29 f1       	breq	.+74     	; 0x854 <Steering_SteerCar+0x52>
 80a:	30 f4       	brcc	.+12     	; 0x818 <Steering_SteerCar+0x16>
 80c:	88 23       	and	r24, r24
 80e:	51 f0       	breq	.+20     	; 0x824 <Steering_SteerCar+0x22>
 810:	81 30       	cpi	r24, 0x01	; 1
 812:	09 f0       	breq	.+2      	; 0x816 <Steering_SteerCar+0x14>
 814:	52 c0       	rjmp	.+164    	; 0x8ba <__stack+0x5b>
 816:	0d c0       	rjmp	.+26     	; 0x832 <Steering_SteerCar+0x30>
 818:	83 30       	cpi	r24, 0x03	; 3
 81a:	69 f1       	breq	.+90     	; 0x876 <__stack+0x17>
 81c:	84 30       	cpi	r24, 0x04	; 4
 81e:	09 f0       	breq	.+2      	; 0x822 <Steering_SteerCar+0x20>
 820:	4c c0       	rjmp	.+152    	; 0x8ba <__stack+0x5b>
 822:	3a c0       	rjmp	.+116    	; 0x898 <__stack+0x39>
	 {
	    case CAR_STOP:
		 {
			 ERROR = Motor_Stop(MOTOR_1);
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 2d 03 	call	0x65a	; 0x65a <Motor_Stop>
			 ERROR = Motor_Stop(MOTOR_2);
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	0e 94 2d 03 	call	0x65a	; 0x65a <Motor_Stop>
		 }
		 break;
 830:	45 c0       	rjmp	.+138    	; 0x8bc <__stack+0x5d>
		 case CAR_FORWARD:
		 {
			 ERROR = Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 832:	61 e0       	ldi	r22, 0x01	; 1
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Start(MOTOR_1,speed);
 842:	6c 2f       	mov	r22, r28
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
			 ERROR = Motor_Start(MOTOR_2,speed);
 84a:	6c 2f       	mov	r22, r28
 84c:	82 e0       	ldi	r24, 0x02	; 2
 84e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
		 }
		 break;
 852:	34 c0       	rjmp	.+104    	; 0x8bc <__stack+0x5d>
		 case CAR_BACKWARD:
		 {
			 ERROR = Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
 854:	62 e0       	ldi	r22, 0x02	; 2
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 85c:	62 e0       	ldi	r22, 0x02	; 2
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Start(MOTOR_1,speed);
 864:	6c 2f       	mov	r22, r28
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
			 ERROR = Motor_Start(MOTOR_2,speed);
 86c:	6c 2f       	mov	r22, r28
 86e:	82 e0       	ldi	r24, 0x02	; 2
 870:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
		 }
		 break;
 874:	23 c0       	rjmp	.+70     	; 0x8bc <__stack+0x5d>
		 case CAR_RIGHT:
		 {
			 ERROR = Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 876:	61 e0       	ldi	r22, 0x01	; 1
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 87e:	62 e0       	ldi	r22, 0x02	; 2
 880:	82 e0       	ldi	r24, 0x02	; 2
 882:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Start(MOTOR_1,speed);
 886:	6c 2f       	mov	r22, r28
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
			 ERROR = Motor_Start(MOTOR_2,speed);
 88e:	6c 2f       	mov	r22, r28
 890:	82 e0       	ldi	r24, 0x02	; 2
 892:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
		 }
		 break;
 896:	12 c0       	rjmp	.+36     	; 0x8bc <__stack+0x5d>
		 case CAR_LEFT:
		 {
			 ERROR = Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
 898:	62 e0       	ldi	r22, 0x02	; 2
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 8a0:	61 e0       	ldi	r22, 0x01	; 1
 8a2:	82 e0       	ldi	r24, 0x02	; 2
 8a4:	0e 94 89 02 	call	0x512	; 0x512 <Motor_Direction>
			 ERROR = Motor_Start(MOTOR_1,speed);
 8a8:	6c 2f       	mov	r22, r28
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
			 ERROR = Motor_Start(MOTOR_2,speed);
 8b0:	6c 2f       	mov	r22, r28
 8b2:	82 e0       	ldi	r24, 0x02	; 2
 8b4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Motor_Start>
		 }
		 break;
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <__stack+0x5d>
		 default:
		 ERROR = E_NOK;
 8ba:	80 e0       	ldi	r24, 0x00	; 0
		 break;
	 }

	 return ERROR;
 8bc:	cf 91       	pop	r28
 8be:	08 95       	ret

000008c0 <Timer_Init>:

static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
 8c0:	fc 01       	movw	r30, r24
	ERROR_STATUS ERROR = E_OK;
	
	Timer_Mode = Timer_cfg->Timer_Mode;
 8c2:	91 81       	ldd	r25, Z+1	; 0x01
 8c4:	90 93 68 00 	sts	0x0068, r25
	
	/*Check the prescaler for each channel and set the mode*/
	switch(Timer_cfg->Timer_Ch)
 8c8:	80 81       	ld	r24, Z
 8ca:	81 30       	cpi	r24, 0x01	; 1
 8cc:	b9 f1       	breq	.+110    	; 0x93c <Timer_Init+0x7c>
 8ce:	20 f0       	brcs	.+8      	; 0x8d8 <Timer_Init+0x18>
 8d0:	82 30       	cpi	r24, 0x02	; 2
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <Timer_Init+0x16>
 8d4:	9f c0       	rjmp	.+318    	; 0xa14 <Timer_Init+0x154>
 8d6:	63 c0       	rjmp	.+198    	; 0x99e <Timer_Init+0xde>
	{
		case TIMER_CH0:
		{
			switch(Timer_cfg->Timer_PreScaler)
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	84 30       	cpi	r24, 0x04	; 4
 8dc:	a1 f0       	breq	.+40     	; 0x906 <Timer_Init+0x46>
 8de:	28 f4       	brcc	.+10     	; 0x8ea <Timer_Init+0x2a>
 8e0:	81 30       	cpi	r24, 0x01	; 1
 8e2:	41 f0       	breq	.+16     	; 0x8f4 <Timer_Init+0x34>
 8e4:	82 30       	cpi	r24, 0x02	; 2
 8e6:	f1 f4       	brne	.+60     	; 0x924 <Timer_Init+0x64>
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <Timer_Init+0x3c>
 8ea:	86 30       	cpi	r24, 0x06	; 6
 8ec:	89 f0       	breq	.+34     	; 0x910 <Timer_Init+0x50>
 8ee:	87 30       	cpi	r24, 0x07	; 7
 8f0:	c9 f4       	brne	.+50     	; 0x924 <Timer_Init+0x64>
 8f2:	13 c0       	rjmp	.+38     	; 0x91a <Timer_Init+0x5a>
			{
				case TIMER_PRESCALER_NO:
				Timer_Prescaler = T0_PRESCALER_NO;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	80 93 67 00 	sts	0x0067, r24
				break;
 8fa:	15 c0       	rjmp	.+42     	; 0x926 <Timer_Init+0x66>
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T0_PRESCALER_8;
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 902:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_NO:
				Timer_Prescaler = T0_PRESCALER_NO;
				break;
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T0_PRESCALER_8;
				break;
 904:	10 c0       	rjmp	.+32     	; 0x926 <Timer_Init+0x66>
				case TIMER_PRESCALER_32:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_64:
				Timer_Prescaler = T0_PRESCALER_64;
 906:	83 e0       	ldi	r24, 0x03	; 3
 908:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 90c:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_32:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_64:
				Timer_Prescaler = T0_PRESCALER_64;
				break;
 90e:	0b c0       	rjmp	.+22     	; 0x926 <Timer_Init+0x66>
				case TIMER_PRESCALER_128:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T0_PRESCALER_256;
 910:	84 e0       	ldi	r24, 0x04	; 4
 912:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 916:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_128:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T0_PRESCALER_256;
				break;
 918:	06 c0       	rjmp	.+12     	; 0x926 <Timer_Init+0x66>
				case TIMER_PRESCALER_1024:
				Timer_Prescaler = T0_PRESCALER_1024;
 91a:	85 e0       	ldi	r24, 0x05	; 5
 91c:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 920:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T0_PRESCALER_256;
				break;
				case TIMER_PRESCALER_1024:
				Timer_Prescaler = T0_PRESCALER_1024;
				break;
 922:	01 c0       	rjmp	.+2      	; 0x926 <Timer_Init+0x66>
				break;
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T0_PRESCALER_8;
				break;
				case TIMER_PRESCALER_32:
				ERROR = E_NOK;
 924:	80 e0       	ldi	r24, 0x00	; 0
				default:
				ERROR = E_NOK;
				break;
			}
			
			CLEAR_BIT(TCNT0,0xFF);
 926:	92 b7       	in	r25, 0x32	; 50
 928:	12 be       	out	0x32, r1	; 50
			SET_BIT(TCCR0,((Timer_cfg->Timer_Mode)|(T0_OC0_DIS)));
 92a:	23 b7       	in	r18, 0x33	; 51
 92c:	91 81       	ldd	r25, Z+1	; 0x01
 92e:	92 2b       	or	r25, r18
 930:	93 bf       	out	0x33, r25	; 51
			SET_BIT(TIMSK,Timer_cfg->Timer_Interrupt_Mode);
 932:	29 b7       	in	r18, 0x39	; 57
 934:	93 81       	ldd	r25, Z+3	; 0x03
 936:	92 2b       	or	r25, r18
 938:	99 bf       	out	0x39, r25	; 57
		}
		break;
 93a:	08 95       	ret
		case TIMER_CH1:
		{
			switch(Timer_cfg->Timer_PreScaler)
 93c:	82 81       	ldd	r24, Z+2	; 0x02
 93e:	84 30       	cpi	r24, 0x04	; 4
 940:	a1 f0       	breq	.+40     	; 0x96a <Timer_Init+0xaa>
 942:	28 f4       	brcc	.+10     	; 0x94e <Timer_Init+0x8e>
 944:	81 30       	cpi	r24, 0x01	; 1
 946:	41 f0       	breq	.+16     	; 0x958 <Timer_Init+0x98>
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	f1 f4       	brne	.+60     	; 0x988 <Timer_Init+0xc8>
 94c:	09 c0       	rjmp	.+18     	; 0x960 <Timer_Init+0xa0>
 94e:	86 30       	cpi	r24, 0x06	; 6
 950:	89 f0       	breq	.+34     	; 0x974 <Timer_Init+0xb4>
 952:	87 30       	cpi	r24, 0x07	; 7
 954:	c9 f4       	brne	.+50     	; 0x988 <Timer_Init+0xc8>
 956:	13 c0       	rjmp	.+38     	; 0x97e <Timer_Init+0xbe>
			{
				case TIMER_PRESCALER_NO:
				Timer_Prescaler = T1_PRESCALER_NO;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	80 93 67 00 	sts	0x0067, r24
				break;
 95e:	15 c0       	rjmp	.+42     	; 0x98a <Timer_Init+0xca>
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T1_PRESCALER_8;
 960:	82 e0       	ldi	r24, 0x02	; 2
 962:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 966:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_NO:
				Timer_Prescaler = T1_PRESCALER_NO;
				break;
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T1_PRESCALER_8;
				break;
 968:	10 c0       	rjmp	.+32     	; 0x98a <Timer_Init+0xca>
				case TIMER_PRESCALER_32:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_64:
				Timer_Prescaler = T1_PRESCALER_64;
 96a:	83 e0       	ldi	r24, 0x03	; 3
 96c:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 970:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_32:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_64:
				Timer_Prescaler = T1_PRESCALER_64;
				break;
 972:	0b c0       	rjmp	.+22     	; 0x98a <Timer_Init+0xca>
				case TIMER_PRESCALER_128:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T1_PRESCALER_256;
 974:	84 e0       	ldi	r24, 0x04	; 4
 976:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 97a:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_128:
				ERROR = E_NOK;
				break;
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T1_PRESCALER_256;
				break;
 97c:	06 c0       	rjmp	.+12     	; 0x98a <Timer_Init+0xca>
				case TIMER_PRESCALER_1024:
				Timer_Prescaler = T1_PRESCALER_1024;
 97e:	85 e0       	ldi	r24, 0x05	; 5
 980:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 984:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T1_PRESCALER_256;
				break;
				case TIMER_PRESCALER_1024:
				Timer_Prescaler = T1_PRESCALER_1024;
				break;
 986:	01 c0       	rjmp	.+2      	; 0x98a <Timer_Init+0xca>
				break;
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T1_PRESCALER_8;
				break;
				case TIMER_PRESCALER_32:
				ERROR = E_NOK;
 988:	80 e0       	ldi	r24, 0x00	; 0
				default:
				ERROR = E_NOK;
				break;
			}
			
			 SET_BIT(TCCR1,(Timer_cfg->Timer_Mode));
 98a:	2e b5       	in	r18, 0x2e	; 46
 98c:	3f b5       	in	r19, 0x2f	; 47
 98e:	29 2b       	or	r18, r25
 990:	3f bd       	out	0x2f, r19	; 47
 992:	2e bd       	out	0x2e, r18	; 46
			 SET_BIT(TIMSK,Timer_cfg->Timer_Interrupt_Mode);
 994:	29 b7       	in	r18, 0x39	; 57
 996:	93 81       	ldd	r25, Z+3	; 0x03
 998:	92 2b       	or	r25, r18
 99a:	99 bf       	out	0x39, r25	; 57
		}
		break;
 99c:	08 95       	ret
		case TIMER_CH2:
		{
			switch(Timer_cfg->Timer_PreScaler)
 99e:	82 81       	ldd	r24, Z+2	; 0x02
 9a0:	84 30       	cpi	r24, 0x04	; 4
 9a2:	d9 f0       	breq	.+54     	; 0x9da <Timer_Init+0x11a>
 9a4:	30 f4       	brcc	.+12     	; 0x9b2 <Timer_Init+0xf2>
 9a6:	82 30       	cpi	r24, 0x02	; 2
 9a8:	71 f0       	breq	.+28     	; 0x9c6 <Timer_Init+0x106>
 9aa:	90 f4       	brcc	.+36     	; 0x9d0 <Timer_Init+0x110>
 9ac:	81 30       	cpi	r24, 0x01	; 1
 9ae:	49 f5       	brne	.+82     	; 0xa02 <Timer_Init+0x142>
 9b0:	06 c0       	rjmp	.+12     	; 0x9be <Timer_Init+0xfe>
 9b2:	86 30       	cpi	r24, 0x06	; 6
 9b4:	e1 f0       	breq	.+56     	; 0x9ee <Timer_Init+0x12e>
 9b6:	b0 f0       	brcs	.+44     	; 0x9e4 <Timer_Init+0x124>
 9b8:	87 30       	cpi	r24, 0x07	; 7
 9ba:	19 f5       	brne	.+70     	; 0xa02 <Timer_Init+0x142>
 9bc:	1d c0       	rjmp	.+58     	; 0x9f8 <Timer_Init+0x138>
			{
				case TIMER_PRESCALER_NO:
				Timer_Prescaler = T2_PRESCALER_NO;
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	80 93 67 00 	sts	0x0067, r24
				break;
 9c4:	1f c0       	rjmp	.+62     	; 0xa04 <Timer_Init+0x144>
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T2_PRESCALER_8;
 9c6:	82 e0       	ldi	r24, 0x02	; 2
 9c8:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 9cc:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_NO:
				Timer_Prescaler = T2_PRESCALER_NO;
				break;
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T2_PRESCALER_8;
				break;
 9ce:	1a c0       	rjmp	.+52     	; 0xa04 <Timer_Init+0x144>
				case TIMER_PRESCALER_32:
				Timer_Prescaler = T2_PRESCALER_32;
 9d0:	83 e0       	ldi	r24, 0x03	; 3
 9d2:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 9d6:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_8:
				Timer_Prescaler = T2_PRESCALER_8;
				break;
				case TIMER_PRESCALER_32:
				Timer_Prescaler = T2_PRESCALER_32;
				break;
 9d8:	15 c0       	rjmp	.+42     	; 0xa04 <Timer_Init+0x144>
				case TIMER_PRESCALER_64:
				Timer_Prescaler = T2_PRESCALER_64;
 9da:	84 e0       	ldi	r24, 0x04	; 4
 9dc:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 9e0:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_32:
				Timer_Prescaler = T2_PRESCALER_32;
				break;
				case TIMER_PRESCALER_64:
				Timer_Prescaler = T2_PRESCALER_64;
				break;
 9e2:	10 c0       	rjmp	.+32     	; 0xa04 <Timer_Init+0x144>
				case TIMER_PRESCALER_128:
				Timer_Prescaler = T2_PRESCALER_128;
 9e4:	85 e0       	ldi	r24, 0x05	; 5
 9e6:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_64:
				Timer_Prescaler = T2_PRESCALER_64;
				break;
				case TIMER_PRESCALER_128:
				Timer_Prescaler = T2_PRESCALER_128;
				break;
 9ec:	0b c0       	rjmp	.+22     	; 0xa04 <Timer_Init+0x144>
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T2_PRESCALER_256;
 9ee:	86 e0       	ldi	r24, 0x06	; 6
 9f0:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 9f4:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_128:
				Timer_Prescaler = T2_PRESCALER_128;
				break;
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T2_PRESCALER_256;
				break;
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <Timer_Init+0x144>
				case TIMER_PRESCALER_1024:
				Timer_Prescaler = T2_PRESCALER_1024;
 9f8:	87 e0       	ldi	r24, 0x07	; 7
 9fa:	80 93 67 00 	sts	0x0067, r24
static volatile uint8_t Timer_Mode;
static volatile uint8_t Timer_Prescaler;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
	ERROR_STATUS ERROR = E_OK;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
				case TIMER_PRESCALER_256:
				Timer_Prescaler = T2_PRESCALER_256;
				break;
				case TIMER_PRESCALER_1024:
				Timer_Prescaler = T2_PRESCALER_1024;
				break;
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <Timer_Init+0x144>
				default:
				ERROR = E_NOK;
 a02:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			
			SET_BIT(TCCR2,(Timer_cfg->Timer_Mode));
 a04:	25 b5       	in	r18, 0x25	; 37
 a06:	92 2b       	or	r25, r18
 a08:	95 bd       	out	0x25, r25	; 37
			SET_BIT(TIMSK,Timer_cfg->Timer_Interrupt_Mode);
 a0a:	29 b7       	in	r18, 0x39	; 57
 a0c:	93 81       	ldd	r25, Z+3	; 0x03
 a0e:	92 2b       	or	r25, r18
 a10:	99 bf       	out	0x39, r25	; 57
		}
		break;
 a12:	08 95       	ret
		default:
		ERROR = E_NOK;
 a14:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return ERROR;
}
 a16:	08 95       	ret

00000a18 <Timer_Start>:
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{	
	ERROR_STATUS ERROR = E_OK;
	
	/*Start the timer according to the channel by setting the prescaler value, plus initializing the timer to get the desired number of ticks*/
	switch(Timer_CH_NO)
 a18:	81 30       	cpi	r24, 0x01	; 1
 a1a:	d1 f0       	breq	.+52     	; 0xa50 <Timer_Start+0x38>
 a1c:	20 f0       	brcs	.+8      	; 0xa26 <Timer_Start+0xe>
 a1e:	82 30       	cpi	r24, 0x02	; 2
 a20:	09 f0       	breq	.+2      	; 0xa24 <Timer_Start+0xc>
 a22:	46 c0       	rjmp	.+140    	; 0xab0 <Timer_Start+0x98>
 a24:	30 c0       	rjmp	.+96     	; 0xa86 <Timer_Start+0x6e>
	{
		case TIMER_CH0:
		{
			switch(Timer_Mode)
 a26:	80 91 68 00 	lds	r24, 0x0068
 a2a:	88 23       	and	r24, r24
 a2c:	19 f0       	breq	.+6      	; 0xa34 <Timer_Start+0x1c>
 a2e:	88 30       	cpi	r24, 0x08	; 8
 a30:	41 f4       	brne	.+16     	; 0xa42 <Timer_Start+0x2a>
 a32:	04 c0       	rjmp	.+8      	; 0xa3c <Timer_Start+0x24>
			{
				case T0_NORMAL_MODE:
				TCNT0 = (T0_MAX_VALUE-Timer_Count);
 a34:	61 95       	neg	r22
 a36:	62 bf       	out	0x32, r22	; 50
}


ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{	
	ERROR_STATUS ERROR = E_OK;
 a38:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(Timer_Mode)
			{
				case T0_NORMAL_MODE:
				TCNT0 = (T0_MAX_VALUE-Timer_Count);
				break;
 a3a:	04 c0       	rjmp	.+8      	; 0xa44 <Timer_Start+0x2c>
				case T0_COMP_MODE:
				OCR0 = Timer_Count;
 a3c:	6c bf       	out	0x3c, r22	; 60
}


ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{	
	ERROR_STATUS ERROR = E_OK;
 a3e:	81 e0       	ldi	r24, 0x01	; 1
				case T0_NORMAL_MODE:
				TCNT0 = (T0_MAX_VALUE-Timer_Count);
				break;
				case T0_COMP_MODE:
				OCR0 = Timer_Count;
				break;
 a40:	01 c0       	rjmp	.+2      	; 0xa44 <Timer_Start+0x2c>
				default:
				ERROR = E_NOK;
 a42:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			SET_BIT(TCCR0,Timer_Prescaler);
 a44:	93 b7       	in	r25, 0x33	; 51
 a46:	20 91 67 00 	lds	r18, 0x0067
 a4a:	92 2b       	or	r25, r18
 a4c:	93 bf       	out	0x33, r25	; 51
		}
		break;
 a4e:	08 95       	ret
		case TIMER_CH1:	
		{
			switch(Timer_Mode)
 a50:	80 91 68 00 	lds	r24, 0x0068
 a54:	88 23       	and	r24, r24
 a56:	19 f0       	breq	.+6      	; 0xa5e <Timer_Start+0x46>
 a58:	88 30       	cpi	r24, 0x08	; 8
 a5a:	61 f4       	brne	.+24     	; 0xa74 <Timer_Start+0x5c>
 a5c:	07 c0       	rjmp	.+14     	; 0xa6c <Timer_Start+0x54>
			{
				case T1_NORMAL_MODE:
				TCNT1 = (T1_MAX_VALUE-Timer_Count);
 a5e:	71 95       	neg	r23
 a60:	61 95       	neg	r22
 a62:	71 09       	sbc	r23, r1
 a64:	7d bd       	out	0x2d, r23	; 45
 a66:	6c bd       	out	0x2c, r22	; 44
}


ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{	
	ERROR_STATUS ERROR = E_OK;
 a68:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(Timer_Mode)
			{
				case T1_NORMAL_MODE:
				TCNT1 = (T1_MAX_VALUE-Timer_Count);
				break;
 a6a:	05 c0       	rjmp	.+10     	; 0xa76 <Timer_Start+0x5e>
				case T1_COMP_MODE_OCR1A_TOP:
				OCR1A = Timer_Count;
 a6c:	7b bd       	out	0x2b, r23	; 43
 a6e:	6a bd       	out	0x2a, r22	; 42
}


ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{	
	ERROR_STATUS ERROR = E_OK;
 a70:	81 e0       	ldi	r24, 0x01	; 1
				case T1_NORMAL_MODE:
				TCNT1 = (T1_MAX_VALUE-Timer_Count);
				break;
				case T1_COMP_MODE_OCR1A_TOP:
				OCR1A = Timer_Count;
				break;
 a72:	01 c0       	rjmp	.+2      	; 0xa76 <Timer_Start+0x5e>
				default:
				ERROR = E_NOK;
 a74:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			SET_BIT(TCCR1,Timer_Prescaler);
 a76:	2e b5       	in	r18, 0x2e	; 46
 a78:	3f b5       	in	r19, 0x2f	; 47
 a7a:	90 91 67 00 	lds	r25, 0x0067
 a7e:	29 2b       	or	r18, r25
 a80:	3f bd       	out	0x2f, r19	; 47
 a82:	2e bd       	out	0x2e, r18	; 46
		}
		break;
 a84:	08 95       	ret
		case TIMER_CH2:
		{
			switch(Timer_Mode)
 a86:	80 91 68 00 	lds	r24, 0x0068
 a8a:	88 23       	and	r24, r24
 a8c:	19 f0       	breq	.+6      	; 0xa94 <Timer_Start+0x7c>
 a8e:	88 30       	cpi	r24, 0x08	; 8
 a90:	41 f4       	brne	.+16     	; 0xaa2 <Timer_Start+0x8a>
 a92:	04 c0       	rjmp	.+8      	; 0xa9c <Timer_Start+0x84>
			{
				case T2_NORMAL_MODE:
				TCNT2 = (T2_MAX_VALUE-Timer_Count);
 a94:	61 95       	neg	r22
 a96:	64 bd       	out	0x24, r22	; 36
}


ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{	
	ERROR_STATUS ERROR = E_OK;
 a98:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(Timer_Mode)
			{
				case T2_NORMAL_MODE:
				TCNT2 = (T2_MAX_VALUE-Timer_Count);
				break;
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <Timer_Start+0x8c>
				case T2_COMP_MODE:
				OCR2 = Timer_Count;
 a9c:	63 bd       	out	0x23, r22	; 35
}


ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{	
	ERROR_STATUS ERROR = E_OK;
 a9e:	81 e0       	ldi	r24, 0x01	; 1
				case T2_NORMAL_MODE:
				TCNT2 = (T2_MAX_VALUE-Timer_Count);
				break;
				case T2_COMP_MODE:
				OCR2 = Timer_Count;
				break;
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <Timer_Start+0x8c>
				default:
				ERROR = E_NOK;
 aa2:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
			SET_BIT(TCCR2,Timer_Prescaler);
 aa4:	95 b5       	in	r25, 0x25	; 37
 aa6:	20 91 67 00 	lds	r18, 0x0067
 aaa:	92 2b       	or	r25, r18
 aac:	95 bd       	out	0x25, r25	; 37
		}
		break;
 aae:	08 95       	ret
		default:
		ERROR = E_NOK;
 ab0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return ERROR;
}
 ab2:	08 95       	ret

00000ab4 <Timer_Stop>:
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	ERROR_STATUS ERROR = E_OK;
	
	/*Stop the timer by clearing the prescaler */
	switch(Timer_CH_NO)
 ab4:	81 30       	cpi	r24, 0x01	; 1
 ab6:	49 f0       	breq	.+18     	; 0xaca <Timer_Stop+0x16>
 ab8:	18 f0       	brcs	.+6      	; 0xac0 <Timer_Stop+0xc>
 aba:	82 30       	cpi	r24, 0x02	; 2
 abc:	81 f4       	brne	.+32     	; 0xade <Timer_Stop+0x2a>
 abe:	0a c0       	rjmp	.+20     	; 0xad4 <Timer_Stop+0x20>
	{
		case TIMER_CH0:
		CLEAR_BIT(TCCR0,0x07);
 ac0:	83 b7       	in	r24, 0x33	; 51
 ac2:	88 7f       	andi	r24, 0xF8	; 248
 ac4:	83 bf       	out	0x33, r24	; 51
	return ERROR;
}

ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	ERROR_STATUS ERROR = E_OK;
 ac6:	81 e0       	ldi	r24, 0x01	; 1
	/*Stop the timer by clearing the prescaler */
	switch(Timer_CH_NO)
	{
		case TIMER_CH0:
		CLEAR_BIT(TCCR0,0x07);
		break;
 ac8:	08 95       	ret
		case TIMER_CH1:
		CLEAR_BIT(TCCR1B,0x07);
 aca:	8e b5       	in	r24, 0x2e	; 46
 acc:	88 7f       	andi	r24, 0xF8	; 248
 ace:	8e bd       	out	0x2e, r24	; 46
	return ERROR;
}

ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	ERROR_STATUS ERROR = E_OK;
 ad0:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH0:
		CLEAR_BIT(TCCR0,0x07);
		break;
		case TIMER_CH1:
		CLEAR_BIT(TCCR1B,0x07);
		break;
 ad2:	08 95       	ret
		case TIMER_CH2:
		CLEAR_BIT(TCCR2,0x07);
 ad4:	85 b5       	in	r24, 0x25	; 37
 ad6:	88 7f       	andi	r24, 0xF8	; 248
 ad8:	85 bd       	out	0x25, r24	; 37
	return ERROR;
}

ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
	ERROR_STATUS ERROR = E_OK;
 ada:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH1:
		CLEAR_BIT(TCCR1B,0x07);
		break;
		case TIMER_CH2:
		CLEAR_BIT(TCCR2,0x07);
		break;
 adc:	08 95       	ret
		default:
		ERROR = E_NOK;
 ade:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	
	return ERROR;
}
 ae0:	08 95       	ret

00000ae2 <Timer_GetValue>:

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	ERROR_STATUS ERROR = E_OK;
	
	switch(Timer_CH_NO)
 ae2:	81 30       	cpi	r24, 0x01	; 1
 ae4:	51 f0       	breq	.+20     	; 0xafa <Timer_GetValue+0x18>
 ae6:	18 f0       	brcs	.+6      	; 0xaee <Timer_GetValue+0xc>
 ae8:	82 30       	cpi	r24, 0x02	; 2
 aea:	a1 f4       	brne	.+40     	; 0xb14 <Timer_GetValue+0x32>
 aec:	0d c0       	rjmp	.+26     	; 0xb08 <Timer_GetValue+0x26>
	{
		case TIMER_CH0:
		*Data = TCNT0;
 aee:	82 b7       	in	r24, 0x32	; 50
 af0:	fb 01       	movw	r30, r22
 af2:	80 83       	st	Z, r24
 af4:	11 82       	std	Z+1, r1	; 0x01
	return ERROR;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	ERROR_STATUS ERROR = E_OK;
 af6:	81 e0       	ldi	r24, 0x01	; 1
	
	switch(Timer_CH_NO)
	{
		case TIMER_CH0:
		*Data = TCNT0;
		break;
 af8:	08 95       	ret
		case TIMER_CH1:
		*Data = TCNT1;
 afa:	8c b5       	in	r24, 0x2c	; 44
 afc:	9d b5       	in	r25, 0x2d	; 45
 afe:	fb 01       	movw	r30, r22
 b00:	91 83       	std	Z+1, r25	; 0x01
 b02:	80 83       	st	Z, r24
	return ERROR;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	ERROR_STATUS ERROR = E_OK;
 b04:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH0:
		*Data = TCNT0;
		break;
		case TIMER_CH1:
		*Data = TCNT1;
		break;
 b06:	08 95       	ret
		case TIMER_CH2:
		*Data = TCNT2;
 b08:	84 b5       	in	r24, 0x24	; 36
 b0a:	fb 01       	movw	r30, r22
 b0c:	80 83       	st	Z, r24
 b0e:	11 82       	std	Z+1, r1	; 0x01
	return ERROR;
}

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	ERROR_STATUS ERROR = E_OK;
 b10:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_CH1:
		*Data = TCNT1;
		break;
		case TIMER_CH2:
		*Data = TCNT2;
		break;
 b12:	08 95       	ret
		default:
		ERROR = E_NOK;
 b14:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return ERROR;
 b16:	08 95       	ret

00000b18 <Us_Init>:
 */ 

 #include "Us.h"

 ERROR_STATUS Us_Init(void)
 {
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
 b1c:	00 d0       	rcall	.+0      	; 0xb1e <Us_Init+0x6>
 b1e:	00 d0       	rcall	.+0      	; 0xb20 <Us_Init+0x8>
 b20:	1f 92       	push	r1
 b22:	cd b7       	in	r28, 0x3d	; 61
 b24:	de b7       	in	r29, 0x3e	; 62
    ERROR_STATUS ERROR = E_OK;
	 
	 DIO_Cfg_s dio_cfg_Triger = {GPIOB,BIT1,HIGH};
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	89 83       	std	Y+1, r24	; 0x01
 b2a:	82 e0       	ldi	r24, 0x02	; 2
 b2c:	8a 83       	std	Y+2, r24	; 0x02
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	9b 83       	std	Y+3, r25	; 0x03
	 Icu_cfg_s Icu_cfg ={ICU_CH2,ICU_TIMER_CH0};
 b32:	8c 83       	std	Y+4, r24	; 0x04
 b34:	1d 82       	std	Y+5, r1	; 0x05
	 
	 ERROR = Icu_Init(&Icu_cfg); 
 b36:	ce 01       	movw	r24, r28
 b38:	04 96       	adiw	r24, 0x04	; 4
 b3a:	0e 94 a3 01 	call	0x346	; 0x346 <Icu_Init>
	 ERROR = DIO_init(&dio_cfg_Triger);
 b3e:	ce 01       	movw	r24, r28
 b40:	01 96       	adiw	r24, 0x01	; 1
 b42:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_init>

	 return ERROR;
 }
 b46:	0f 90       	pop	r0
 b48:	0f 90       	pop	r0
 b4a:	0f 90       	pop	r0
 b4c:	0f 90       	pop	r0
 b4e:	0f 90       	pop	r0
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	08 95       	ret

00000b56 <Us_Trigger>:

 ERROR_STATUS Us_Trigger(void)
 {
    ERROR_STATUS ERROR = E_OK;
	 
	 DIO_Write(GPIOB,BIT1,HIGH);				//trigger the sensor
 b56:	4f ef       	ldi	r20, 0xFF	; 255
 b58:	62 e0       	ldi	r22, 0x02	; 2
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b60:	8a e1       	ldi	r24, 0x1A	; 26
 b62:	8a 95       	dec	r24
 b64:	f1 f7       	brne	.-4      	; 0xb62 <Us_Trigger+0xc>
 b66:	00 c0       	rjmp	.+0      	; 0xb68 <Us_Trigger+0x12>
	 _delay_us(5);
	 
	 DIO_Write(GPIOB,BIT1,0);
 b68:	40 e0       	ldi	r20, 0x00	; 0
 b6a:	62 e0       	ldi	r22, 0x02	; 2
 b6c:	81 e0       	ldi	r24, 0x01	; 1
 b6e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_Write>
 b72:	8a e1       	ldi	r24, 0x1A	; 26
 b74:	8a 95       	dec	r24
 b76:	f1 f7       	brne	.-4      	; 0xb74 <Us_Trigger+0x1e>
 b78:	00 c0       	rjmp	.+0      	; 0xb7a <Us_Trigger+0x24>
	 _delay_us(5);

	 return ERROR;
 }
 b7a:	81 e0       	ldi	r24, 0x01	; 1
 b7c:	08 95       	ret

00000b7e <Us_GetDistance>:


 ERROR_STATUS Us_GetDistance(uint16_t *Distance)
 {
 b7e:	0f 93       	push	r16
 b80:	1f 93       	push	r17
 b82:	cf 93       	push	r28
 b84:	df 93       	push	r29
 b86:	00 d0       	rcall	.+0      	; 0xb88 <Us_GetDistance+0xa>
 b88:	00 d0       	rcall	.+0      	; 0xb8a <Us_GetDistance+0xc>
 b8a:	cd b7       	in	r28, 0x3d	; 61
 b8c:	de b7       	in	r29, 0x3e	; 62
 b8e:	8c 01       	movw	r16, r24
	 ERROR_STATUS ERROR = E_OK;
	 uint32_t ICU_read = 0;
 b90:	19 82       	std	Y+1, r1	; 0x01
 b92:	1a 82       	std	Y+2, r1	; 0x02
 b94:	1b 82       	std	Y+3, r1	; 0x03
 b96:	1c 82       	std	Y+4, r1	; 0x04
	 
    Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&ICU_read);
 b98:	ae 01       	movw	r20, r28
 b9a:	4f 5f       	subi	r20, 0xFF	; 255
 b9c:	5f 4f       	sbci	r21, 0xFF	; 255
 b9e:	61 e0       	ldi	r22, 0x01	; 1
 ba0:	82 e0       	ldi	r24, 0x02	; 2
 ba2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <Icu_ReadTime>
    *Distance = ((ICU_read*16)/58);						//Distance in cm
 ba6:	89 81       	ldd	r24, Y+1	; 0x01
 ba8:	9a 81       	ldd	r25, Y+2	; 0x02
 baa:	ab 81       	ldd	r26, Y+3	; 0x03
 bac:	bc 81       	ldd	r27, Y+4	; 0x04
 bae:	88 0f       	add	r24, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	aa 1f       	adc	r26, r26
 bb4:	bb 1f       	adc	r27, r27
 bb6:	88 0f       	add	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	aa 1f       	adc	r26, r26
 bbc:	bb 1f       	adc	r27, r27
 bbe:	bc 01       	movw	r22, r24
 bc0:	cd 01       	movw	r24, r26
 bc2:	66 0f       	add	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	2a e3       	ldi	r18, 0x3A	; 58
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	40 e0       	ldi	r20, 0x00	; 0
 bd8:	50 e0       	ldi	r21, 0x00	; 0
 bda:	0e 94 10 06 	call	0xc20	; 0xc20 <__udivmodsi4>
 bde:	f8 01       	movw	r30, r16
 be0:	31 83       	std	Z+1, r19	; 0x01
 be2:	20 83       	st	Z, r18
    
	 return ERROR;
 }
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	0f 90       	pop	r0
 be8:	0f 90       	pop	r0
 bea:	0f 90       	pop	r0
 bec:	0f 90       	pop	r0
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	1f 91       	pop	r17
 bf4:	0f 91       	pop	r16
 bf6:	08 95       	ret

00000bf8 <__divmodhi4>:
 bf8:	97 fb       	bst	r25, 7
 bfa:	07 2e       	mov	r0, r23
 bfc:	16 f4       	brtc	.+4      	; 0xc02 <__divmodhi4+0xa>
 bfe:	00 94       	com	r0
 c00:	07 d0       	rcall	.+14     	; 0xc10 <__divmodhi4_neg1>
 c02:	77 fd       	sbrc	r23, 7
 c04:	09 d0       	rcall	.+18     	; 0xc18 <__divmodhi4_neg2>
 c06:	0e 94 32 06 	call	0xc64	; 0xc64 <__udivmodhi4>
 c0a:	07 fc       	sbrc	r0, 7
 c0c:	05 d0       	rcall	.+10     	; 0xc18 <__divmodhi4_neg2>
 c0e:	3e f4       	brtc	.+14     	; 0xc1e <__divmodhi4_exit>

00000c10 <__divmodhi4_neg1>:
 c10:	90 95       	com	r25
 c12:	81 95       	neg	r24
 c14:	9f 4f       	sbci	r25, 0xFF	; 255
 c16:	08 95       	ret

00000c18 <__divmodhi4_neg2>:
 c18:	70 95       	com	r23
 c1a:	61 95       	neg	r22
 c1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c1e <__divmodhi4_exit>:
 c1e:	08 95       	ret

00000c20 <__udivmodsi4>:
 c20:	a1 e2       	ldi	r26, 0x21	; 33
 c22:	1a 2e       	mov	r1, r26
 c24:	aa 1b       	sub	r26, r26
 c26:	bb 1b       	sub	r27, r27
 c28:	fd 01       	movw	r30, r26
 c2a:	0d c0       	rjmp	.+26     	; 0xc46 <__udivmodsi4_ep>

00000c2c <__udivmodsi4_loop>:
 c2c:	aa 1f       	adc	r26, r26
 c2e:	bb 1f       	adc	r27, r27
 c30:	ee 1f       	adc	r30, r30
 c32:	ff 1f       	adc	r31, r31
 c34:	a2 17       	cp	r26, r18
 c36:	b3 07       	cpc	r27, r19
 c38:	e4 07       	cpc	r30, r20
 c3a:	f5 07       	cpc	r31, r21
 c3c:	20 f0       	brcs	.+8      	; 0xc46 <__udivmodsi4_ep>
 c3e:	a2 1b       	sub	r26, r18
 c40:	b3 0b       	sbc	r27, r19
 c42:	e4 0b       	sbc	r30, r20
 c44:	f5 0b       	sbc	r31, r21

00000c46 <__udivmodsi4_ep>:
 c46:	66 1f       	adc	r22, r22
 c48:	77 1f       	adc	r23, r23
 c4a:	88 1f       	adc	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	1a 94       	dec	r1
 c50:	69 f7       	brne	.-38     	; 0xc2c <__udivmodsi4_loop>
 c52:	60 95       	com	r22
 c54:	70 95       	com	r23
 c56:	80 95       	com	r24
 c58:	90 95       	com	r25
 c5a:	9b 01       	movw	r18, r22
 c5c:	ac 01       	movw	r20, r24
 c5e:	bd 01       	movw	r22, r26
 c60:	cf 01       	movw	r24, r30
 c62:	08 95       	ret

00000c64 <__udivmodhi4>:
 c64:	aa 1b       	sub	r26, r26
 c66:	bb 1b       	sub	r27, r27
 c68:	51 e1       	ldi	r21, 0x11	; 17
 c6a:	07 c0       	rjmp	.+14     	; 0xc7a <__udivmodhi4_ep>

00000c6c <__udivmodhi4_loop>:
 c6c:	aa 1f       	adc	r26, r26
 c6e:	bb 1f       	adc	r27, r27
 c70:	a6 17       	cp	r26, r22
 c72:	b7 07       	cpc	r27, r23
 c74:	10 f0       	brcs	.+4      	; 0xc7a <__udivmodhi4_ep>
 c76:	a6 1b       	sub	r26, r22
 c78:	b7 0b       	sbc	r27, r23

00000c7a <__udivmodhi4_ep>:
 c7a:	88 1f       	adc	r24, r24
 c7c:	99 1f       	adc	r25, r25
 c7e:	5a 95       	dec	r21
 c80:	a9 f7       	brne	.-22     	; 0xc6c <__udivmodhi4_loop>
 c82:	80 95       	com	r24
 c84:	90 95       	com	r25
 c86:	bc 01       	movw	r22, r24
 c88:	cd 01       	movw	r24, r26
 c8a:	08 95       	ret

00000c8c <_exit>:
 c8c:	f8 94       	cli

00000c8e <__stop_program>:
 c8e:	ff cf       	rjmp	.-2      	; 0xc8e <__stop_program>
